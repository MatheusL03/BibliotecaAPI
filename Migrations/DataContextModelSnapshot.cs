// <auto-generated />
using System;
using BibliotecaApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BibliotecaApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BibliotecaApi.Models.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataLivro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disponibilidade")
                        .HasColumnType("bit");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomedoLivro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("preco")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TB_LIVRO", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Autor = "Deus",
                            DataLivro = "Desconhecido",
                            Disponibilidade = true,
                            Genero = "Livro Sagrado",
                            NomedoLivro = "Bíblia",
                            preco = 50m
                        },
                        new
                        {
                            Id = 2,
                            Autor = "George Orwell",
                            DataLivro = "1949",
                            Disponibilidade = true,
                            Genero = "Ficção política",
                            NomedoLivro = "1984",
                            preco = 30m
                        },
                        new
                        {
                            Id = 3,
                            Autor = "Charlie Mackesy",
                            DataLivro = "2020",
                            Disponibilidade = true,
                            Genero = "Animação",
                            NomedoLivro = "O Menino, a Toupeira, a Raposa e o Cavalo",
                            preco = 60m
                        },
                        new
                        {
                            Id = 4,
                            Autor = "Charles Duhigg",
                            DataLivro = "2012",
                            Disponibilidade = true,
                            Genero = "Livro de autoajuda",
                            NomedoLivro = "O Poder do Hábito",
                            preco = 55m
                        },
                        new
                        {
                            Id = 5,
                            Autor = "Christian Barbosa",
                            DataLivro = "2008",
                            Disponibilidade = true,
                            Genero = "Livro de autoajuda",
                            NomedoLivro = "A tríade do tempo",
                            preco = 40m
                        });
                });

            modelBuilder.Entity("BibliotecaApi.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Perfil")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Jogador");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TB_USUARIOS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "seuEmail@gmail.com",
                            Latitude = -23.520024100000001,
                            PasswordHash = new byte[] { 10, 30, 181, 10, 143, 224, 54, 15, 135, 107, 223, 1, 212, 192, 14, 115, 193, 38, 12, 22, 132, 149, 177, 17, 138, 140, 43, 132, 38, 227, 111, 251, 131, 129, 107, 65, 83, 149, 62, 178, 216, 235, 126, 102, 160, 86, 32, 148, 90, 204, 76, 32, 139, 94, 119, 183, 29, 69, 26, 197, 240, 200, 106, 65 },
                            PasswordSalt = new byte[] { 6, 56, 174, 232, 0, 200, 145, 39, 254, 0, 20, 138, 157, 6, 16, 142, 189, 83, 122, 27, 114, 135, 239, 186, 97, 109, 125, 183, 174, 85, 61, 198, 65, 189, 229, 184, 167, 84, 38, 113, 14, 44, 147, 33, 24, 20, 126, 192, 90, 151, 228, 103, 231, 245, 177, 12, 82, 0, 181, 129, 187, 13, 231, 118, 188, 244, 121, 19, 26, 197, 127, 121, 25, 235, 244, 35, 132, 225, 65, 16, 38, 81, 71, 46, 28, 44, 47, 30, 3, 141, 132, 36, 51, 250, 155, 15, 139, 135, 255, 195, 5, 194, 167, 23, 75, 14, 36, 42, 112, 107, 171, 6, 9, 123, 89, 129, 87, 124, 36, 100, 98, 165, 67, 62, 219, 59, 107, 86 },
                            Perfil = "Admin",
                            Username = "UsuarioAmin",
                            longitude = -46.596497999999997
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
